/**
 * Program: Game- Four in a row written in C. [stack implement was taken by geeksforgeeks]
 */


#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <sys/queue.h>
#include "matala3.h"

#include <limits.h>


void Play(int mat[6][7]);
void PrintBoard(int mat[6][7]);


 // Stack implement.
 
 
// A structure to represent a stack
struct Stack
{
    int top;
    unsigned capacity;
    int* array;
};
 
// function to create a stack of given capacity. It initializes size of
// stack as 0
struct Stack* createStack(unsigned capacity)
{
    struct Stack* stack = (struct Stack*) malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (int*) malloc(stack->capacity * sizeof(int));
    return stack;
}
 
// Stack is full when top is equal to the last index
int isFull(struct Stack* stack)
{   return stack->top == stack->capacity - 1; }
 
// Stack is empty when top is equal to -1
int isEmpty(struct Stack* stack)
{   return stack->top == -1;  }
 
// Function to add an item to stack.  It increases top by 1
void push(struct Stack* stack, int item)
{
    if (isFull(stack))
        return;
    stack->array[++stack->top] = item;
    printf("%d pushed to stack\n", item);
}
 
// Function to remove an item from stack.  It decreases top by 1
int pop(struct Stack* stack)
{
    if (isEmpty(stack))
        return INT_MIN;
    return stack->array[stack->top--];
}


// Code: 
// Priting function.

void PrintBoard(int mat[6][7]) {
    int i,j;
    for(i=0; i< 6; i++) {
        for(j=0; j < 7; j++) {
            if(mat[i][j] == 2) {
                printf("|O");
            }
            else if(mat[i][j] == 1) {
                printf("|X");
            }
            else {
                printf("| ");
            }
        }
        printf("|\n");
    }
    printf(" 1 2 3 4 5 6 7\n");
}
// Checking colums for winner.
int Checkcolums(int mat[6][7]) {
    int i,j;
    int counter = 0;
       for(i=0; i<6; i++) {
          for(j=0; j<7; j++) {
              if(mat[i][j] == 1) {
                  counter++;
                  if(counter == 4) {
                      return 1;
                  }
              }
              else {
                  counter = 0;
              }
         }
       }
        for(i=0; i<6; i++) {
          for(j=0; j<7; j++) {
              if(mat[i][j] == 2) {
                  counter++;
                  if(counter == 4) {
                      return 2;
                  }
              }
              else {
                  counter = 0;
              }
         }
    }
    return 0;
}
// Checking rows for winner.
int Checkrows(int mat[6][7]) {
    int i,j;
    int counter = 0;
       for(i=0; i<6; i++) {
          for(j=0; j<7; j++) {
              if(mat[j][i] == 1) {
                  counter++;
                  if(counter == 4) {
                      return 1;
                  }
              }
              else {
                  counter = 0;
              }
         }
    }
    for(i=0; i<6; i++) {
          for(j=0; j<7; j++) {
              if(mat[j][i] == 2) {
                  counter++;
                  if(counter == 4) {
                      return 2;
                  }
              }
              else {
                  counter = 0;
              }
         }
    }
    return 0;
}
// Checking traces for winner.
int Checktrace(int mat[6][7]) {
    int row,col;
    int counter = 0;
    for(col = 0;  col< 4; col++) {
           for(row = 0; row< 3; row++) {
              if (mat[row][col] != 0 &&
                    mat[row][col] == mat[row+1][col+1] &&
                    mat[row][col] == mat[row+2][col+2] &&
                    mat[row][col] == mat[row+3][col+3]) {
                         return mat[row][col];
                    }
           }
           for(row = 2; row < 6; row++) {
               if (mat[row][col] != 0 &&
                 mat[row][col] == mat[row-1][col+1] &&
                 mat[row][col] == mat[row-2][col+2] &&
                 mat[row][col] == mat[row-3][col+3])
                 {
                       return mat[row][col];
                 }
           }
       }
    return 0;
}
// Checking the winner function.
int Checkwin(int mat[6][7]) {
    if(Checkcolums(mat) == 1 || Checkrows(mat) == 1 || Checktrace(mat) == 1) {
        return 1;
    }
    else if(Checkcolums(mat) == 2 || Checkrows(mat) == 2 || Checktrace(mat) == 2) {
        return 2;
    }
    else {
        return 0;
    }
} 

// Reversing function - undo.
void Reverse(int mat[6][7], struct Stack* stack) {
    int i;
    
    if(isEmpty(stack)) {
        printf("Nothing to reverse.\n");
    }
    else {
        int col = pop(stack);
        if(mat[0][col] != 0) {
            mat[0][col] = 0;
        }
        else {
           for(i=5; i>-1; i--) {
               if(mat[i][col] != 0) { continue; }
                else {
                     mat[i+1][col] = 0;
                }
            }
        }
        
    }
    printf("Reversed.\n");
    PrintBoard(mat);
    
    
}


// O turn function
void Oturn(int mat[6][7], struct Stack* stack) { // O turn
     int turn,i;
    printf("Player O, please enter a column number (or 0 to undo): \n");
    scanf("%d", &turn);
    if(turn == 0) {
        Reverse(mat, stack);
    }
    else if(turn > 0 && turn < 8) {
        turn = turn-1;
        for(i=5; i>-1; i--) {
            if(mat[i][turn] == 0) {
                mat[i][turn] = 2;
                push(stack, turn);
                break;
            }
        }
        PrintBoard(mat);
        
    }
    else if(mat[0][turn] != 0) {
            printf("Colum is full!\n");
            Xturn(mat, stack);
    }
    else {
        printf("Wrong input\n");
    }
}
// X turn function.
void Xturn(int mat[6][7], struct Stack* stack) {
    int turn, i;
    printf("Player X, please enter a column number (or 0 to undo): \n");
    scanf("%d", &turn);
    if(turn == 0) {
        Reverse(mat, stack);
    }
    else if(turn > 0 && turn < 8) {
        turn = turn-1;
        for(i=5; i>-1; i--) {
            if(mat[i][turn] == 0) {
                mat[i][turn] = 1;
                push(stack, turn);
                break;
            }
        }
        PrintBoard(mat);
        
    }
    else if(mat[0][turn] != 0) {
            printf("Colum is full!\n");
            Xturn(mat, stack);
    }
    else {
        printf("Wrong number\n");
    }
    
}

// Start the game.
void Play(int mat[6][7]) {
    struct Stack* stack = createStack(100);
    int winner;
    do {
        Xturn(mat, stack);
        winner = Checkwin(mat);
        if(winner != 0) { break; }
        Oturn(mat, stack);
        winner = Checkwin(mat);
        if(winner != 0) { break; }
       
    } while( winner == 0);
    if(winner == 1) { printf("Player X in the winner!!"); }
    else if(winner == 2) { printf("Player O is the winner!!"); }
}



int main() {
  int x[6][7];
  int i,j;
  for(i=0; i< 6; i++) {
      for(j = 0 ; j < 7; j++) {
          x[i][j] = 0;
      }
  }
   
   Play(x);

    
    
}
